import Sequelize from "sequelize";
import { Bug, Project, User } from "./repository.mjs";

function valid(Model, payload) {
    return Object.entries(Model.tableAttributes).reduce((valid, [name, field]) => {
        if(valid
            && !field._autoGenerated
            && !field.primaryKey
            && field.allowNull === false
            && !payload[name]) {
                valid = false;
            }
        return valid;
    }, true)
}

function attributes(req) {
    if(req.headers['x-fields']) {
        return req.headers['x-fields'].split(',');
    } else {
        return undefined;
    }
}

function where(req) {
    if(req.query.filter) {
        req.query.filter.split(',').reduce((filter, condition) => {
            let data = condition.split('-');
            filter[data[0]] = {[Sequelize.Op[data[1]]]: data[2]}
            return filter;
        }, {})
    } else {
        return undefined;
    }
}

function order(req) {
    if(req.headers['x-sort']) {
        req.headers['x-fields'].split(',').reduce((sort, field) => {
            sort.push([field.substring(1), field.charAt(0) === '+' ? 'ASC' : 'DESC']);
            return sort;
        }, [])
    } else {
        return undefined;
    }
}

async function getElements(Model, req, res) {
    try {
        let elements = await Model.findAll({
            attributes: attributes(req),
            where: where(req),
            order: order(req)
        });
        if (elements.length > 0) {
            res.status(200).json(elements);
        } else {
            res.status(204).send();
        }
    } catch (error) {
        res.status(500).json(error);
    }
}

async function postElement(Model, req, res) {
    try {
        if (valid(Model, req.body)) {
            let element = await Model.create(req.body);
            res.status(201)
                .location(`http://${req.headers.host}${req.baseUrl}${req.url}${req.url.endsWith('/') ? '' : '/'}${element.id}`)
                .send();
        } else {
            res.status(400).send();
        }
    } catch (error) {
        res.status(500).json(error);
    }
}

async function deleteElements(Model, req, res) {
    try {
        await Model.truncate();
        res.status(204).send();
    } catch (error) {
        res.status(500).json(error);
    }
}

async function getElement(Model, req, res) {
    try {
        let element = await Model.findByPk(req.params.id, {
            attributes: attributes(req)
        });
        if(element) {
            res.status(200).json(element);
        } else {
            res.status(404).send();
        }
    } catch (error) {
        res.status(500).json(error);
    }
}

async function headElement(Model, req, res) {
    try {
        res.status(await Model.findByPk(req.params.id) ? 204 : 404).send();
    } catch (error) {
        res.status(500).json(error);
    }
}

async function putElement(Model, req, res) {
    try {
        let element = await Model.findByPk(req.params.id);
        if(element) {
            if (valid(Model, req.body)) {
                await element.update(req.body);
                res.status(204).send();
            } else {
                res.status(400).send();
            }
        } else {
            res.status(404).send();
        }
    } catch (error) {
        res.status(500).json(error);
    }
}

async function patchElement(Model, req, res) {
    try {
        let element = await Model.findByPk(req.params.id);
        if(element) {
            Object.entries(req.body).forEach(([name, value]) => element[name] = value);
            await element.save();
            res.status(204).send();
        } else {
            res.status(404).send();
        }
    } catch (error) {
        res.status(500).json(error);
    }
}

async function deleteElement(Model, req, res) {
    try {
        let element = await Model.findByPk(req.params.id);
        if(element) {
            await element.destroy();
            res.status(204).send();
        } else {
            res.status(404).send();
        }
    } catch (error) {
        res.status(500),json(error);
    }
}

async function getProjectUsers(req, res) {
    try {
        let users = await Project.findByPk(req.params.projectId,
        {
            include: [
                {
                    model: User,
                    as: "users",
                    through: {
                    attributes: [],
                    }
                },
            ],
        });
        res.status(200).json(users);
    } catch (error) {
        res.status(500).json(error);
    }
}

async function postProjectUser(req, res) {
    try {
        let project = await Project.findByPk(req.params.projectId);
        let user = await User.findByPk(req.params.userId);
        if (project && user) {
            await project.addUser(user);
            res.status(204).send();
        } else {
            res.status(404).send();
        }
    } catch (error) {
        res.status(500).json(error);
    }
}

async function getProjectUser(req, res) {


}

async function getUserProjects(req, res) {
    try {
        let projects = await User.findByPk(req.params.userId,
        {
            include: [
                {
                    model: Project,
                    as: "projects",
                    through: {
                    attributes: [],
                    }
                },
            ],
        });
        res.status(200).json(projects);
    } catch (error) {
        res.status(500).json(error);
    }
}

async function getProjectBugs(req, res) {
    try {
        let bugs = await Bug.findAll(
        {
            where: {projectId: req.params.projectId},
        });
        res.status(200).json(bugs);
    } catch (error) {
        res.status(500).json(error);
    }
}

export {
    //functii generale
    getElements, postElement, deleteElements,                           //randuri multiple
    getElement, headElement, putElement, patchElement, deleteElement,   //randuri dupa id
    //functii specifice
    getProjectUsers, getProjectUser,                                    //utilizator/i dupa id-ul unui proiect
    getUserProjects,                                                    //proiectele dupa id-ul unui utilizator
    postProjectUser,                                                    //creare legatura intre id-ul unui proiect si id-ul unui utilizator
    getProjectBugs                                                      //bug-uri dupa id-ul unui proiect
}